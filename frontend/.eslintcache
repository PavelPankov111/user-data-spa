[{"/Users/pavel/Desktop/user-data-spa/frontend/src/index.js":"1","/Users/pavel/Desktop/user-data-spa/frontend/src/components/App/App.jsx":"2","/Users/pavel/Desktop/user-data-spa/frontend/src/components/Authorization/Authorization.jsx":"3","/Users/pavel/Desktop/user-data-spa/frontend/src/utils/Api.js":"4","/Users/pavel/Desktop/user-data-spa/frontend/src/components/ProtectedRoute/ProtectedRoute.jsx":"5"},{"size":298,"mtime":1611800968363,"results":"6","hashOfConfig":"7"},{"size":282,"mtime":1611795493513,"results":"8","hashOfConfig":"7"},{"size":3391,"mtime":1611801328352,"results":"9","hashOfConfig":"7"},{"size":564,"mtime":1611797654493,"results":"10","hashOfConfig":"7"},{"size":295,"mtime":1611800730255,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1p1m1dt",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/pavel/Desktop/user-data-spa/frontend/src/index.js",[],["24","25"],"/Users/pavel/Desktop/user-data-spa/frontend/src/components/App/App.jsx",[],"/Users/pavel/Desktop/user-data-spa/frontend/src/components/Authorization/Authorization.jsx",["26"],"import React from 'react';\nimport './Authorization.css'\nimport Api from '../../utils/Api'\nimport { Route, Switch, Link } from 'react-router-dom'\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute'\n\nfunction Authorization() {\n    const api = new Api()\n\n    const [isButtonDisable, setIsButtonDisable] = React.useState(true)\n    const [inputError, setInputError] = React.useState(false)\n    const [isServerError, setIsServerError] = React.useState(false)\n    const [loggedIn, setLoggedIn] = React.useState(false)\n\n    const [submitFrom, setSubmitFrom] = React.useState({\n        inputName: '',\n        inputPassword: ''\n    })\n\n    const handleInputRegisterChange = React.useCallback((e) => {\n        const { name, value } = e.target;\n        setSubmitFrom(prevState => ({ ...prevState, [name]: value }))\n        setIsButtonDisable(false)\n        setInputError(false)\n    }, [setSubmitFrom])\n\n    function handleSubmit(e) {\n        e.preventDefault()\n        if (inputName !== '' && inputPassword !== '') {\n            api.auth()\n                .then((users) => {\n                    console.log(users)\n                    users.map((user) => {\n                        if (inputName === user.name && inputPassword === user.password) {\n                            console.log('рррр')\n                            setInputError(false)\n                            setLoggedIn(true)\n                        }\n                    })\n                })\n                .catch((err) => {\n                    setInputError(true)\n                    setIsButtonDisable(true)\n                    setIsServerError(true)\n                    console.log(err)\n                })\n        } else {\n            setIsButtonDisable(true)\n            setInputError(true)\n        }\n    }\n\n    const { inputName, inputPassword } = submitFrom\n\n    const errorText = () => {\n        if (isServerError) {\n            return 'Ошибка на сервере'\n        } else {\n            return 'Одно либо оба поля не заполнены'\n        }\n    }\n\n    return <Switch>\n        <Route path=\"*\" >\n            <form onSubmit={handleSubmit} className='authorization'>\n                {loggedIn ?\n                    <Link className=\"contact\" to=\"/contact\">Контакты</Link>\n                    : ''}\n                <div className={loggedIn ? `authorization__content authorization__content_disable` : `authorization__content`}>\n                    <h1 className=\"authorization__title\">Войдите</h1>\n                    <input name=\"inputName\" value={inputName} onChange={handleInputRegisterChange} placeholder=\"Имя\" className=\"input authorization__name\" type=\"text\" />\n                    <input name=\"inputPassword\" value={inputPassword} onChange={handleInputRegisterChange} placeholder=\"Пароль\" className=\"input authorization__password\" type=\"password\" />\n                    <span className={inputError ? `input__error input__error_visible` : `input__error`}>{errorText()}</span>\n                    <button className={isButtonDisable ? `authorization__submit authorization__submit_disable` : `authorization__submit`} type=\"submit\">Войти</button>\n                </div>\n\n            </form>\n            <ProtectedRoute exact path=\"/contact\" loggedIn={loggedIn}>\n\n            </ProtectedRoute>\n        </Route>\n    </Switch>\n}\n\nexport default Authorization;","/Users/pavel/Desktop/user-data-spa/frontend/src/utils/Api.js",[],"/Users/pavel/Desktop/user-data-spa/frontend/src/components/ProtectedRoute/ProtectedRoute.jsx",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":33,"column":38,"nodeType":"33","messageId":"34","endLine":33,"endColumn":40},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]